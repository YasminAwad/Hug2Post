"use client";
import Header from "@/components/Header";
import InputBar from "@/components/InputBar";
import MessageArea from "@/components/MessageArea";
import React, { useState, useEffect } from "react";

interface Message {
  id: number;
  content: string;
  isUser: boolean;
  type: "user" | "assistant";
}

const Home = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      content: "Hello! I'm your ChatBot assistant. How can I help you today?",
      isUser: false,
      type: "assistant",
    },
  ]);
  const [currentMessage, setCurrentMessage] = useState("");
  const [sessionId, setSessionId] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);

  // Generate session ID on component mount
  useEffect(() => {
    const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    setSessionId(newSessionId);
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!currentMessage.trim() || isLoading) return;

    // Add user message
    const userMessageId = messages.length + 1;
    setMessages((prev) => [
      ...prev,
      { id: userMessageId, content: currentMessage, isUser: true, type: "user" },
    ]);

    const userInput = currentMessage;
    setCurrentMessage("");
    setIsLoading(true);

    try {
      // Send request to FastAPI
      const response = await fetch("http://localhost:8000/chat", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
          message: userInput,
          session_id: sessionId 
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const aiContent = data.response || "Sorry, I couldn't process your request.";
      
      // Update session ID if it was generated by the server
      if (data.session_id && data.session_id !== sessionId) {
        setSessionId(data.session_id);
      }

      // Add AI message
      setMessages((prev) => [
        ...prev,
        { 
          id: userMessageId + 1, 
          content: aiContent, 
          isUser: false, 
          type: "assistant" 
        },
      ]);
    } catch (error) {
      console.error("Chat error:", error);
      setMessages((prev) => [
        ...prev,
        { 
          id: messages.length + 2, 
          content: "Sorry, I'm having trouble connecting to the server. Please try again.", 
          isUser: false, 
          type: "assistant" 
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const clearChat = () => {
    setMessages([
      {
        id: 1,
        content: "Hello! I'm your ChatBot assistant. How can I help you today?",
        isUser: false,
        type: "assistant",
      },
    ]);
    // Generate new session ID
    const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    setSessionId(newSessionId);
  };

  return (
    <div className="flex justify-center bg-gray-100 min-h-screen py-8 px-4">
      <div className="w-full max-w-6xl bg-white flex flex-col rounded-xl shadow-lg border border-gray-100 overflow-hidden h-[90vh]">
        <Header />
        <MessageArea messages={messages} isLoading={isLoading} />
        <InputBar
          currentMessage={currentMessage}
          setCurrentMessage={setCurrentMessage}
          onSubmit={handleSubmit}
          isLoading={isLoading}
        />
      </div>
    </div>
  );
};

export default Home;